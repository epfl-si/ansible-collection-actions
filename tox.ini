;;;;;;;;;;;;;;;;;;;;;;;;
;; Test configuration ;;
;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Install tox and tox-ansible into the same place, e.g.
;;
;;   pipx inject --global ansible tox
;;   pipx inject --global ansible tox-ansible
;;
;; Then type this into your shell (assuming bash or zsh); or better,
;; put it in your .bashrc / .bash_alias / .zshrc :
;;
;;    alias toxsible="sh -c 'cd /where/ever/is/epfl_si/actions; /opt/pipx/venvs/ansible/bin/tox --ansible "'$@'"' -- "
;;
;; From now on,
;;
;;    toxsible
;;
;;
;; will run the entire test matrix. (Ignore the snotty warnings and
;; focus on the green bar.)
;;
;; This could take a while though, depending on how many Pythons you keep
;; around. To run in a single Python environment, first list what's available
;; with
;;
;;    toxsible --listenvs
;;
;; and then pick one e.g.
;;
;;    toxsible -e unit-py3.12-2.18
;;
;; If you want to drill down to running a single test, the syntax will be
;; something like
;;
;;    toxsible -e unit-py3.12-2.18 -- tests/unit/plugins/module_utils/test_testlib.py::describe_the_test_suite::it_runs_actions

[tox]
skipsdist = True

[ansible]
skip =
    ;; This package only has unit tests (for now)
    integration
    sanity
    ;; This package couldn't care less about compatibility with unreleased versions of Ansible...
    devel
    milestone
    ;; ... nor with obsolete ones.
    2.15
    2.16
    2.17

[testenv]
deps =  -r{toxinidir}/tests/requirements.txt
